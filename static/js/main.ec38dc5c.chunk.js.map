{"version":3,"sources":["components/LandingPage.jsx","components/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["LandingPage","react_default","a","createElement","lib","className","col","src","alt","href","rel","target","aria-hidden","React","Component","NavBar","style","height","title","react_router_dom","textDecoration","color","to","App","components_NavBar","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec38dc5c.chunk.js","sourcesContent":["import React from 'react'\nimport { Grid, Cell } from 'react-mdl'\n\nexport default class LandingPage extends React.Component {\n  render () {\n    return (\n      <div>\n        <Grid className=\"landing-grid\">\n        <Cell col={12}>\n        <img\n          src='https://yt3.ggpht.com/a-/AN66SAwhTTSatB57ajJhGOgpEadYezr1dtmVre72eA=s900-mo-c-c0xffffffff-rj-k-no'\n          alt='avi eve'\n          className=\"avatar-img\"\n        />\n        <div className=\"banner-text\">\n          <h1>Full Stack Web Developer</h1>\n          <hr/>\n          <p>HTML/CSS | JavaScript | NodeJS | Express | React | Redux | Knex/SQLite | Bulma</p>\n          <div className=\"social-links\">\n          {/* Linkedin */}\n            <a href=\"https://www.linkedin.com/in/eve-henare-80a9a1157/\" rel=\"noopener noreferrer\" target=\"_blank\">\n              <i className=\"fa fa-linkedin-square\" aria-hidden=\"true\"/>\n            </a>\n          {/* Github */}\n          <a href=\"https://github.com/EveEden\" rel=\"noopener noreferrer\" target=\"_blank\">\n              <i className=\"fa fa-github-square\" aria-hidden=\"true\"/>\n            </a>\n          {/* Free Code Camp */}\n          <a href=\"https://www.freecodecamp.org/eve_eden\" rel=\"noopener noreferrer\" target=\"_blank\">\n              <i className=\"fa fa-free-code-camp\" aria-hidden=\"true\"/>\n            </a>  \n          </div>\n          <h5>This website is under construction - external links currently not working</h5>\n        </div>\n        </Cell>\n        </Grid>\n      </div>\n    )\n  }\n}","import React from 'react'\nimport {Layout, Header, Navigation, Drawer, Content } from 'react-mdl'\nimport { Link } from 'react-router-dom'\n\nconst NavBar = () => {\n  return (\n    <div style={{height: '70px'}}>\n        <Layout>\n          <Header className=\"header-color\" title={<Link style={{ textDecoration: 'none', color: 'white' }} to='/'>home</Link>}>\n              <Navigation>\n                  <Link to=\"/resume\">Resume</Link>\n                  <Link to=\"/projects\">Projects</Link>\n                  <Link to=\"/mystyle\">My Style</Link>\n                  <Link to=\"/contact\">Contact</Link>\n              </Navigation>\n          </Header>\n          <Drawer title={<Link style={{ textDecoration: 'none', color: 'lilac' }} to='/'>home</Link>}>\n              <Navigation>\n                  <Link to=\"/resume\">Resume</Link>\n                  <Link to=\"/projects\">Projects</Link>\n                  <Link to=\"/mystyle\">My Style</Link>\n                  <Link to=\"/contact\">Contact</Link>\n              </Navigation>\n          </Drawer>\n          <Content >\n          </Content>\n        </Layout>                     \n      </div>\n  )\n}\n\nexport default NavBar\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport './App.css'\n\nimport LandingPage from './components/LandingPage'\nimport NavBar from './components/NavBar'\n\nconst App = () => {\n  return (\n    <div className='App'>\n    <Router>\n      <NavBar />\n      <Switch>\n        <Route exact path='/' component={LandingPage} />\n      </Switch>\n    </Router>\n    </div>                      \n  )\n}  \n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App /> \n  </BrowserRouter>,\n  document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}